# DO NOT EDIT. Generated from /extra/github-actions
# TODO: support skip ci (https://github.community/t/github-actions-does-not-respect-skip-ci/17325/8)

name: CI
on: [push, pull_request]

jobs:
  cancel:
    name: "Cancel previous runs"
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.3.1
        with:
          workflow_id: 1447568
          access_token: ${{ github.token }}

  windows64-build:
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      OPAMYES: 1
      CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
      ARCH: 64
      MINGW_ARCH: x86_64
      CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
      CYG_ROOT: C:/cygwin64
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Unix)
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Install Neko using snapshot from S3 (Windows)
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      - name: choco install nsis
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 10
          command: choco install --no-progress nsis.portable --version 3.02 -y
      - name: choco install things
        shell: pwsh
        run: choco install --no-progress curl wget 7zip.portable -y
      - name: Prepend Chocolatey path
        shell: pwsh
        run: Write-Host "::add-path::C:\ProgramData\chocolatey\bin"

      - name: Install OCaml and OCaml libraries
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          curl.exe -fsSL -o cygwin-setup.exe --retry 3 $($env:CYGWIN_SETUP)
          Start-Process -FilePath "cygwin-setup.exe" -ArgumentList "-B -q -R $($env:CYG_ROOT) -l C:/tmp -s $($env:CYG_MIRROR) -P default -P make -P git -P zlib-devel -P rsync -P patch -P diffutils -P curl -P unzip -P tar -P m4 -P perl -P libpcre-devel -P mbedtls-devel -P mingw64-$($env:MINGW_ARCH)-zlib -P mingw64-$($env:MINGW_ARCH)-gcc-core -P mingw64-$($env:MINGW_ARCH)-pcre" -Wait
          curl.exe -fsSL -o "opam.tar.xz" --retry 3 https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam$($env:ARCH).tar.xz
          curl.exe -fsSL -o "libmbedtls.tar.xz" --retry 3 https://github.com/Simn/mingw64-mbedtls/releases/download/2.16.3/mingw64-$($env:MINGW_ARCH)-mbedtls-2.16.3-1.tar.xz
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'curl -L https://cpanmin.us | perl - App::cpanminus')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm IPC::System::Simple module')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cpanm String::ShellQuote')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'echo "$OLDPWD"')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -C / -xvf libmbedtls.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -xf opam.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && bash opam${ARCH}/install.sh')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam init mingw "https://github.com/fdopen/opam-repository-mingw.git#opam2" --comp 4.07.0+mingw${ARCH}c --switch 4.07.0+mingw${ARCH}c --auto-setup --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam update --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam pin add haxe . --kind=path --no-action --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam pin add ctypes 0.17.1 --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam install haxe --deps-only --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam list')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'ocamlopt -v')

      - name: Expose mingw dll files
        shell: pwsh
        run: Write-Host "::add-path::${env:CYG_ROOT}/usr/$($env:MINGW_ARCH)-w64-mingw32/sys-root/mingw/bin"

      - name: Set ADD_REVISION=1 for non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: echo "ADD_REVISION=1" >> $Env:GITHUB_ENV

      - name: Build Haxe
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win -j`nproc` haxe 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win haxelib 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -f Makefile.win echo_package_files package_bin package_installer_win package_choco 2>&1')
          dir out
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./haxe.exe')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./haxelib.exe')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && ls ./out')

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: win${{env.ARCH}}Binaries
          path: out

  windows64-test:
    needs: windows64-build
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 64
    strategy:
      fail-fast: false
      matrix:
        # TODO enable lua after https://github.com/HaxeFoundation/haxe/issues/5024
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, neko]
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: win${{env.ARCH}}Binaries

      - name: Install Neko using snapshot from S3 (Unix)
        if: ${{ !startsWith(env.PLATFORM, 'windows') }}
        run: |
          set -ex

          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV

      - name: Install Neko using snapshot from S3 (Windows)
        if: ${{ startsWith(env.PLATFORM, 'windows') }}
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV

      - name: Print Neko version
        run: neko -version 2>&1

      # - name: Quick test
      #   shell: pwsh
      #   run: |
      #     $DOWNLOADDIR="./win$($env:ARCH)Binaries"
      #     new-item -Name $DOWNLOADDIR -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/$env:PLATFORM/haxe_latest.zip -OutFile $DOWNLOADDIR/haxe_bin.zip

      - name: Setup Haxe
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win$($env:ARCH)Binaries"
          Expand-Archive $DOWNLOADDIR/*_bin.zip -DestinationPath $DOWNLOADDIR
          Set-PSDebug -Trace 1
          $HAXEPATH = Get-ChildItem $DOWNLOADDIR/haxe_*_* -Directory
          Write-Host "::add-path::$HAXEPATH"
          Write-Host "::set-env name=HAXELIB_ROOT::$HAXEPATH\lib"

      - name: Print Haxe version
        shell: pwsh
        run: haxe -version

      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V

      - name: Install hererocks
        if: matrix.target == 'lua'
        shell: cmd
        run: |
          pip install hererocks
          hererocks lua53 -l5.3 -rlatest
          call lua53/bin/activate

      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$env:HAXELIB_ROOT"
          haxelib setup "$env:HAXELIB_ROOT"

      - name: Test
        shell: pwsh
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
